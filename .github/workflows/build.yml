name: Build Void Linux packages

on:
  push:
    branches:
      - main
      - ci-*
    paths:
      - "packages/**"

env:
  XBPS_ARCH: x86_64
  XBPS_TARGET_ARCH: x86_64

jobs:
  init:
    name: Initialize package builds
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.build-packages.outputs.packages }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Get changed packages
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            packages/**
          dir_names: true
          exclude_submodules: true

      # Needed by build step
      - name: List modified packages to rebuild
        id: build-packages
        env:
          PACKAGES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          packages=$(echo "$PACKAGES" \
            | tr ' ' '\n' \
            | sed 's|^packages/||')

          for package in $PACKAGES; do
            for symlink in $(find -L packages/ -samefile $package); do
              if [ "$symlink" = "$package" ]; then
                continue
              fi

              packages="$packages $(echo "$symlink" | sed 's|^packages/||')"
            done
          done

          echo "$packages" \
            | tr ' ' '\n' \
            | jq --raw-input \
            | jq --compact-output --slurp '{ "package": . }' \
            > packages.json

          echo "packages=$(cat packages.json)" >> $GITHUB_OUTPUT

      # Needed by deploy step
      - name: Find all packages
        run: |
          find packages/* -maxdepth 0 -type d -o -type l \
            | sed 's|^packages/||' \
            | jq --raw-input \
            | jq --compact-output --slurp '{ "package": . }' \
            > packages.json

      - name: Archive packages list
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: packages.json
          retention-days: 1

  build:
    name: Build all packages
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix: ${{ fromJson(needs.init.outputs.packages) }}

    steps:
      - name: Install latest version of xbps
        run: |
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz -o xbps.tar.xz
          tar -xJvf xbps.tar.xz
          rm xbps.tar.xz
          echo "$(pwd)/usr/bin" >> $GITHUB_PATH

      - name: Checkout void-packages
        uses: actions/checkout@v4
        with:
          path: void-packages
          repository: void-linux/void-packages

      - name: Checkout void-repo
        uses: actions/checkout@v4
        with:
          path: void-repo

      - name: Copy package from my own void repository to void-repository
        run: |
          cat void-repo/packages/shlibs >> void-packages/common/shlibs
          find void-repo/packages/* \( -type d -o -type l \) -exec cp -r {} void-packages/srcpkgs/ \;

      - name: Add my own repo to void-packages repo list
        run: |
          mkdir void-packages/etc/xbps.d/custom
          echo 'repository=https://j0ng4b.github.io/void-repo/current' \
            > void-packages/etc/xbps.d/custom/01-j0ng4b-remote-repo.conf

      - name: Building package ${{ matrix.package }}
        id: build-package
        run: |
          cd void-packages
          yes | ./xbps-src -A $XBPS_ARCH binary-bootstrap
          ./xbps-src -A $XBPS_ARCH pkg "${{ matrix.package }}"
          printf "pkgfile=%s-%s_%s.%s.xbps\n" \
            "${{ matrix.package }}" \
            "$(./xbps-src -A $XBPS_ARCH show "${{ matrix.package }}" | grep 'version' | sed 's/\t//' | cut -d ':' -f 2)" \
            "$(./xbps-src -A $XBPS_ARCH show "${{ matrix.package }}" | grep 'revision' | sed 's/\t//' | cut -d ':' -f 2)" \
            "$(uname -m)" \
            >> $GITHUB_OUTPUT

      - name: Uploading ${{ matrix.package }} as artifact
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ matrix.package }}
          path: void-packages/hostdir/binpkgs/${{ steps.build-package.outputs.pkgfile }}

